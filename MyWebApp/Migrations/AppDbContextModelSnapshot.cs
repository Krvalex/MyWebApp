// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyWebApp.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MyWebApp.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MyWebApp.Models.Lesson", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("GroupId")
                        .HasColumnType("bigint");

                    b.Property<long>("LevelId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("LevelId");

                    b.ToTable("lessons");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            FilePath = "/development-environment.html",
                            GroupId = 1L,
                            LevelId = 1L,
                            ReleaseDate = new DateTime(2025, 3, 12, 0, 0, 0, 0, DateTimeKind.Utc),
                            Title = "Урок 1: Выбор среды разработки"
                        },
                        new
                        {
                            Id = 2L,
                            FilePath = "/syntax.html",
                            GroupId = 1L,
                            LevelId = 1L,
                            ReleaseDate = new DateTime(2025, 2, 5, 0, 0, 0, 0, DateTimeKind.Utc),
                            Title = "Урок 2: Основы синтаксиса"
                        },
                        new
                        {
                            Id = 3L,
                            FilePath = "/OOP.html",
                            GroupId = 1L,
                            LevelId = 1L,
                            ReleaseDate = new DateTime(2025, 2, 3, 0, 0, 0, 0, DateTimeKind.Utc),
                            Title = "Урок 3: Основы ООП"
                        },
                        new
                        {
                            Id = 4L,
                            FilePath = "/primitive-types.html",
                            GroupId = 2L,
                            LevelId = 1L,
                            ReleaseDate = new DateTime(2025, 2, 27, 0, 0, 0, 0, DateTimeKind.Utc),
                            Title = "Урок 1: Примитивные типы"
                        },
                        new
                        {
                            Id = 5L,
                            FilePath = "/reference-types.html",
                            GroupId = 2L,
                            LevelId = 1L,
                            ReleaseDate = new DateTime(2025, 2, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            Title = "Урок 2: Ссылочные типы"
                        },
                        new
                        {
                            Id = 6L,
                            FilePath = "/list.html",
                            GroupId = 3L,
                            LevelId = 1L,
                            ReleaseDate = new DateTime(2025, 3, 9, 0, 0, 0, 0, DateTimeKind.Utc),
                            Title = "Урок 1: Списки (List)"
                        },
                        new
                        {
                            Id = 7L,
                            FilePath = "/set.html",
                            GroupId = 3L,
                            LevelId = 1L,
                            ReleaseDate = new DateTime(2025, 2, 25, 0, 0, 0, 0, DateTimeKind.Utc),
                            Title = "Урок 2: Множества (Set)"
                        },
                        new
                        {
                            Id = 8L,
                            FilePath = "/queue.html",
                            GroupId = 3L,
                            LevelId = 1L,
                            ReleaseDate = new DateTime(2025, 2, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            Title = "Урок 3: Очереди (Queue)"
                        },
                        new
                        {
                            Id = 9L,
                            FilePath = "/map.html",
                            GroupId = 3L,
                            LevelId = 1L,
                            ReleaseDate = new DateTime(2025, 3, 7, 0, 0, 0, 0, DateTimeKind.Utc),
                            Title = "Урок 4: Карты (Map)"
                        },
                        new
                        {
                            Id = 10L,
                            FilePath = "/exception.html",
                            GroupId = 4L,
                            LevelId = 2L,
                            ReleaseDate = new DateTime(2025, 2, 23, 0, 0, 0, 0, DateTimeKind.Utc),
                            Title = "Урок 1: Исключения (try, catch, finally)"
                        },
                        new
                        {
                            Id = 11L,
                            FilePath = "/create-exception.html",
                            GroupId = 4L,
                            LevelId = 2L,
                            ReleaseDate = new DateTime(2025, 2, 17, 0, 0, 0, 0, DateTimeKind.Utc),
                            Title = "Урок 2: Создание собственных исключений"
                        },
                        new
                        {
                            Id = 12L,
                            FilePath = "/workwithfiles.html",
                            GroupId = 5L,
                            LevelId = 2L,
                            ReleaseDate = new DateTime(2025, 3, 12, 0, 0, 0, 0, DateTimeKind.Utc),
                            Title = "Урок 1: Чтение и запись файлов"
                        },
                        new
                        {
                            Id = 13L,
                            FilePath = "/threads.html",
                            GroupId = 6L,
                            LevelId = 2L,
                            ReleaseDate = new DateTime(2025, 2, 21, 0, 0, 0, 0, DateTimeKind.Utc),
                            Title = "Урок 1: Потоки"
                        },
                        new
                        {
                            Id = 14L,
                            FilePath = "/synthreads.html",
                            GroupId = 6L,
                            LevelId = 2L,
                            ReleaseDate = new DateTime(2025, 2, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Title = "Урок 2: Синхронизация потоков"
                        },
                        new
                        {
                            Id = 15L,
                            FilePath = "/runnable.html",
                            GroupId = 6L,
                            LevelId = 2L,
                            ReleaseDate = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Utc),
                            Title = "Урок 3: Основы использования Runnable и Thread"
                        },
                        new
                        {
                            Id = 16L,
                            FilePath = "/sockets.html",
                            GroupId = 7L,
                            LevelId = 3L,
                            ReleaseDate = new DateTime(2025, 2, 3, 0, 0, 0, 0, DateTimeKind.Utc),
                            Title = "Урок 1: Работа с сокетами (TCP/UDP)"
                        },
                        new
                        {
                            Id = 17L,
                            FilePath = "/servers.html",
                            GroupId = 7L,
                            LevelId = 3L,
                            ReleaseDate = new DateTime(2025, 3, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            Title = "Урок 2: Создание серверов и клиентов"
                        },
                        new
                        {
                            Id = 18L,
                            FilePath = "/httpquery.html",
                            GroupId = 7L,
                            LevelId = 3L,
                            ReleaseDate = new DateTime(2025, 2, 5, 0, 0, 0, 0, DateTimeKind.Utc),
                            Title = "Урок 3: Работа с HTTP-запросами"
                        },
                        new
                        {
                            Id = 19L,
                            FilePath = "/restful.html",
                            GroupId = 8L,
                            LevelId = 3L,
                            ReleaseDate = new DateTime(2025, 3, 13, 0, 0, 0, 0, DateTimeKind.Utc),
                            Title = "Урок 1: RESTful API"
                        });
                });

            modelBuilder.Entity("MyWebApp.Models.LessonGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("lesson_groups");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Начало работы"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Типы данных"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "Коллекции"
                        },
                        new
                        {
                            Id = 4L,
                            Name = "Обработка ошибок"
                        },
                        new
                        {
                            Id = 5L,
                            Name = "Работа с файлами"
                        },
                        new
                        {
                            Id = 6L,
                            Name = "Основы многозадачности"
                        },
                        new
                        {
                            Id = 7L,
                            Name = "Сетевое программирование"
                        },
                        new
                        {
                            Id = 8L,
                            Name = "Spring Framework"
                        });
                });

            modelBuilder.Entity("MyWebApp.Models.Level", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("levels");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Начальный уровень"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Средний уровень"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "Продвинутый уровень"
                        });
                });

            modelBuilder.Entity("MyWebApp.Models.Lesson", b =>
                {
                    b.HasOne("MyWebApp.Models.LessonGroup", "Group")
                        .WithMany("Lessons")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyWebApp.Models.Level", "Level")
                        .WithMany("Lessons")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Level");
                });

            modelBuilder.Entity("MyWebApp.Models.LessonGroup", b =>
                {
                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("MyWebApp.Models.Level", b =>
                {
                    b.Navigation("Lessons");
                });
#pragma warning restore 612, 618
        }
    }
}
